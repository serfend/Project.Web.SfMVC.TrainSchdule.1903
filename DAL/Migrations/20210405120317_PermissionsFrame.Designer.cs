// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210405120317_PermissionsFrame")]
    partial class PermissionsFrame
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.AdminDivision", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longtitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentCode")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("AdminDivisions");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.Apply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplyAuditStreamSolutionRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditLeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BaseInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExecuteStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExecuteStatusDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MainStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("NowAuditStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplyAuditStreamSolutionRuleId");

                    b.HasIndex("BaseInfoId");

                    b.HasIndex("ExecuteStatusDetailId");

                    b.HasIndex("NowAuditStepId");

                    b.HasIndex("RequestInfoId");

                    b.ToTable("Applies");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplyIndayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstMemberCompanyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstMemberCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MembersAcceptToAudit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MembersFitToAudit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequireMembersAcceptCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.HasIndex("ApplyIndayId");

                    b.ToTable("ApplyAuditSteps");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionOnCompany")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplyAuditStreams");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStreamNodeAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditMembers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuditMembersCount")
                        .HasColumnType("int");

                    b.Property<string>("Companies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCodeLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRefer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DutiesTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DutyIsMajor")
                        .HasColumnType("int");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionOnCompany")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplyAuditStreamNodeActions");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStreamSolutionRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditMembers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AuditMembersCount")
                        .HasColumnType("int");

                    b.Property<string>("Companies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyCodeLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRefer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DutiesTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DutyIsMajor")
                        .HasColumnType("int");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("EntityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("RegionOnCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SolutionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("ApplyAuditStreamSolutionRules");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyBaseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DutiesCode")
                        .HasColumnType("int");

                    b.Property<string>("DutiesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinnalAuditCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RealName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SocialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("CreateById");

                    b.HasIndex("DutiesCode");

                    b.HasIndex("FromId");

                    b.HasIndex("SocialId");

                    b.ToTable("ApplyBaseInfos");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("ModifyById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ModifyById");

                    b.ToTable("ApplyComments");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyCommentLike", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CreateById");

                    b.ToTable("ApplyCommentLikes");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyExecuteStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("HandleById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HandleById");

                    b.ToTable("ApplyExcuteStatus");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ByTransportation")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OnTripLength")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StampLeave")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StampReturn")
                        .HasColumnType("datetime2");

                    b.Property<string>("VacationDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VacationLength")
                        .HasColumnType("int");

                    b.Property<int?>("VacationPlaceCode")
                        .HasColumnType("int");

                    b.Property<string>("VacationPlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VacationType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VacationPlaceCode");

                    b.ToTable("ApplyRequests");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplyIndayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditingById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("HandleStamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StepIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplyId");

                    b.HasIndex("ApplyIndayId");

                    b.HasIndex("AuditingById");

                    b.ToTable("ApplyResponses");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.DailyApply.ApplyInday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplyAuditStreamSolutionRuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuditLeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BaseInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExecuteStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ExecuteStatusDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MainStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("NowAuditStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplyAuditStreamSolutionRuleId");

                    b.HasIndex("BaseInfoId");

                    b.HasIndex("ExecuteStatusDetailId");

                    b.HasIndex("NowAuditStepId");

                    b.HasIndex("RequestInfoId");

                    b.ToTable("AppliesInday");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.DailyApply.ApplyIndayRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ByTransportation")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StampLeave")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StampReturn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VacationPlaceCode")
                        .HasColumnType("int");

                    b.Property<string>("VacationPlaceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VacationPlaceCode");

                    b.ToTable("ApplyIndayRequests");
                });

            modelBuilder.Entity("DAL.Entities.BBS.PostContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Images")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("ReplyCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReplySubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplyToId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("ReplySubjectId");

                    b.HasIndex("ReplyToId");

                    b.ToTable("PostContents");
                });

            modelBuilder.Entity("DAL.Entities.BBS.PostInteractStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("CreateById");

                    b.ToTable("PostInteracts");
                });

            modelBuilder.Entity("DAL.Entities.BBS.SignIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ComboTimes")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SignId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SignIns");
                });

            modelBuilder.Entity("DAL.Entities.ClientDevice.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FutherInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IpInt")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mac")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("OwnerId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("DAL.Entities.ClientDevice.Virus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientMachineId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HandleDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sha1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TraceAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TraceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Key");

                    b.HasIndex("ClientId");

                    b.HasIndex("TraceTypeId");

                    b.ToTable("Viruses");
                });

            modelBuilder.Entity("DAL.Entities.ClientDevice.VirusHandleRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<int>("HandleStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("VirusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VirusKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("VirusId");

                    b.ToTable("VirusHandleRecords");
                });

            modelBuilder.Entity("DAL.Entities.ClientDevice.VirusTrace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sha1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("WarningLevel")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("VirusTraces");
                });

            modelBuilder.Entity("DAL.Entities.ClientDevice.VirusTypeDispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAutoDispatch")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("VirusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VirusTraceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VirusId");

                    b.HasIndex("VirusTraceId");

                    b.ToTable("VirusTypeDispatches");
                });

            modelBuilder.Entity("DAL.Entities.Common.ApplicationUpdateRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Create");

                    b.ToTable("ApplicationUpdateRecords");
                });

            modelBuilder.Entity("DAL.Entities.Common.DataDictionary.CommonDataDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.ToTable("CommonDataDictionaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alias = "保存",
                            Color = "success",
                            Description = "保存到系统，使得记录不被删除",
                            GroupName = "ApplyAction",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Save",
                            Value = 2
                        },
                        new
                        {
                            Id = 2,
                            Alias = "发布",
                            Color = "success",
                            Description = "开始审批流程。可以撤回申请，但不再可删除",
                            GroupName = "ApplyAction",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Publish",
                            Value = 4
                        },
                        new
                        {
                            Id = 3,
                            Alias = "删除",
                            Color = "danger",
                            Description = "不再可见，且不可恢复",
                            GroupName = "ApplyAction",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Delete",
                            Value = 8
                        },
                        new
                        {
                            Id = 4,
                            Alias = "撤回",
                            Color = "info",
                            Description = "取消审批流程，且不可恢复",
                            GroupName = "ApplyAction",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Withdrew",
                            Value = 16
                        },
                        new
                        {
                            Id = 5,
                            Alias = "作废",
                            Color = "danger",
                            Description = "认定此次休假数据无效，且不可恢复",
                            GroupName = "ApplyAction",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Cancel",
                            Value = 32
                        },
                        new
                        {
                            Id = 6,
                            Alias = "未保存",
                            Color = "#000000ff",
                            Description = "Save##Publish##Delete",
                            GroupName = "ApplyStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "NotSave",
                            Value = 0
                        },
                        new
                        {
                            Id = 7,
                            Alias = "未发布",
                            Color = "#a9a9a9ff",
                            Description = "Publish##Delete",
                            GroupName = "ApplyStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "NotPublish",
                            Value = 10
                        },
                        new
                        {
                            Id = 8,
                            Alias = "已撤回",
                            Color = "#808080ff",
                            Description = "",
                            GroupName = "ApplyStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Withdrew",
                            Value = 20
                        },
                        new
                        {
                            Id = 9,
                            Alias = "审核中",
                            Color = "#ff7f50ff",
                            Description = "Withdrew",
                            GroupName = "ApplyStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Auditing",
                            Value = 40
                        },
                        new
                        {
                            Id = 10,
                            Alias = "终审中",
                            Color = "#00bfffff",
                            Description = "Withdrew",
                            GroupName = "ApplyStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "AcceptAndWaitAdmin",
                            Value = 50
                        },
                        new
                        {
                            Id = 11,
                            Alias = "被驳回",
                            Color = "#ff0000ff",
                            Description = "",
                            GroupName = "ApplyStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Denied",
                            Value = 75
                        },
                        new
                        {
                            Id = 12,
                            Alias = "已通过",
                            Color = "#32cd32ff",
                            Description = "Cancel",
                            GroupName = "ApplyStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Accept",
                            Value = 100
                        },
                        new
                        {
                            Id = 13,
                            Alias = "被作废",
                            Color = "#778899ff",
                            Description = "",
                            GroupName = "ApplyStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Cancel",
                            Value = 120
                        },
                        new
                        {
                            Id = 14,
                            Alias = "未确认",
                            Color = "#ff4500ff",
                            Description = "待确认归队时间",
                            GroupName = "ApplyExecuteStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "NotSet",
                            Value = 0
                        },
                        new
                        {
                            Id = 15,
                            Alias = "已确认",
                            Color = "#008000ff",
                            Description = "已确认归队时间",
                            GroupName = "ApplyExecuteStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "BeenSet",
                            Value = 1
                        },
                        new
                        {
                            Id = 16,
                            Alias = "推迟归队",
                            Color = "#ff0000ff",
                            Description = "因事推迟归队",
                            GroupName = "ApplyExecuteStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Delay",
                            Value = 5
                        },
                        new
                        {
                            Id = 17,
                            Alias = "被召回",
                            Color = "#0000ffff",
                            Description = "因事提前归队",
                            GroupName = "ApplyExecuteStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Recall",
                            Value = 3
                        },
                        new
                        {
                            Id = 18,
                            Alias = "无状态",
                            Color = "#ff0000ff",
                            Description = "无状态可用",
                            GroupName = "clientVirusStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "None",
                            Value = 0
                        },
                        new
                        {
                            Id = 19,
                            Alias = "待处理",
                            Color = "#ff0000ff",
                            Description = "处于待处理状态",
                            GroupName = "clientVirusStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Unhandle",
                            Value = 1
                        },
                        new
                        {
                            Id = 20,
                            Alias = "处置成功",
                            Color = "#228b22ff",
                            Description = "此项已处置成功",
                            GroupName = "clientVirusStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "Success",
                            Value = 2
                        },
                        new
                        {
                            Id = 21,
                            Alias = "终端推送已发出",
                            Color = "#d3d3d3ff",
                            Description = "已通过推送系统向终端发送染毒通告待处理中",
                            GroupName = "clientVirusStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientNotify",
                            Value = 4
                        },
                        new
                        {
                            Id = 22,
                            Alias = "第三方消息已发出",
                            Color = "#d3d3d3ff",
                            Description = "已通过第三方系统发布消息",
                            GroupName = "clientVirusStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "MessageSend",
                            Value = 8
                        },
                        new
                        {
                            Id = 23,
                            Alias = "无",
                            Color = "#d3d3d3ff",
                            Description = "暂无状态",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "None",
                            Value = 0
                        },
                        new
                        {
                            Id = 24,
                            Alias = "终端设备",
                            Color = "#d3d3d3ff",
                            Description = "终端设备",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDevice",
                            Value = 256
                        },
                        new
                        {
                            Id = 25,
                            Alias = "终端病毒",
                            Color = "#d3d3d3ff",
                            Description = "终端设备病毒",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirus",
                            Value = 384
                        },
                        new
                        {
                            Id = 26,
                            Alias = "染毒通告",
                            Color = "#ffdab9ff",
                            Description = "通过公告系统发出染毒通告",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusNotify",
                            Value = 388
                        },
                        new
                        {
                            Id = 27,
                            Alias = "染毒即时消息",
                            Color = "#9370dbff",
                            Description = "通过第三方发出染毒即时消息",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusMessage",
                            Value = 389
                        },
                        new
                        {
                            Id = 28,
                            Alias = "新增待处置",
                            Color = "#ff0000ff",
                            Description = "终端设备新增待处置",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusNew",
                            Value = 416
                        },
                        new
                        {
                            Id = 29,
                            Alias = "处置成功",
                            Color = "#228b22ff",
                            Description = "终端设备新增处置成功",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusNewSuccess",
                            Value = 417
                        },
                        new
                        {
                            Id = 30,
                            Alias = "新增未处置",
                            Color = "#8b0000ff",
                            Description = "终端设备新增未处置",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusNewUnhandle",
                            Value = 418
                        },
                        new
                        {
                            Id = 31,
                            Alias = "新增处置失败",
                            Color = "#cd5c5cff",
                            Description = "终端设备新增处置失败",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusNewFail",
                            Value = 419
                        },
                        new
                        {
                            Id = 32,
                            Alias = "新增已处置",
                            Color = "#20b2aaff",
                            Description = "终端设备新增已处置",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusHandle",
                            Value = 448
                        },
                        new
                        {
                            Id = 33,
                            Alias = "自主处置",
                            Color = "#90ee90ff",
                            Description = "自主处置",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusHandleByUser",
                            Value = 449
                        },
                        new
                        {
                            Id = 34,
                            Alias = "第三方处置",
                            Color = "#1e90ffff",
                            Description = "通过第三方处置",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusHandleByIgnore",
                            Value = 461
                        },
                        new
                        {
                            Id = 35,
                            Alias = "提交处置",
                            Color = "#0000cdff",
                            Description = "通过提交方式处置",
                            GroupName = "clientVirusHandleStatus",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "ClientDeviceVirusHandleBySubmit",
                            Value = 481
                        },
                        new
                        {
                            Id = 36,
                            Alias = "不称职",
                            Color = "#e60039",
                            Description = "没有达到岗位基本要求，需备注不称职原因",
                            GroupName = "NormalRateLevel",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "L1",
                            Value = 100
                        },
                        new
                        {
                            Id = 37,
                            Alias = "较差",
                            Color = "#c85554",
                            Description = "基本达到岗位要求",
                            GroupName = "NormalRateLevel",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "L2",
                            Value = 300
                        },
                        new
                        {
                            Id = 38,
                            Alias = "称职",
                            Color = "#337d56",
                            Description = "完全达到本职岗位的所有要求",
                            GroupName = "NormalRateLevel",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "L3",
                            Value = 500
                        },
                        new
                        {
                            Id = 39,
                            Alias = "良好",
                            Color = "#9ec8da",
                            Description = "达到并高于本岗位所有要求的标准",
                            GroupName = "NormalRateLevel",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "L4",
                            Value = 700
                        },
                        new
                        {
                            Id = 40,
                            Alias = "优秀",
                            Color = "#6ff9c1",
                            Description = "表现突出，大幅超出当前岗位要求。需备注优秀原因。",
                            GroupName = "NormalRateLevel",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "L5",
                            Value = 900
                        },
                        new
                        {
                            Id = 41,
                            Alias = "无",
                            Color = "#cbe2e4",
                            Description = "未选择",
                            GroupName = "NormalRateLevel",
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Key = "None",
                            Value = 0
                        });
                });

            modelBuilder.Entity("DAL.Entities.Common.DataDictionary.CommonDataGroup", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.ToTable("CommonDataGroups");

                    b.HasData(
                        new
                        {
                            Name = "clientVirusHandleStatus",
                            Create = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "病毒处置状态，不应修改",
                            Id = 0,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Name = "clientVirusStatus",
                            Create = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "病毒状态，不应修改",
                            Id = 0,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Name = "ApplyStatus",
                            Create = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "休假申请的审批状态，其描述为可进行的操作名称。联动系统逻辑，勿修改",
                            Id = 1,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Name = "ApplyAuditStatus",
                            Create = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "休假申请审批步骤的状态。联动系统逻辑，勿修改",
                            Id = 2,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Name = "ApplyAction",
                            Create = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "对应审批状态下可操作的行为。联动系统逻辑，勿修改",
                            Id = 3,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Name = "ApplyExecuteStatus",
                            Create = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "休假的落实状态。联动系统逻辑，勿修改",
                            Id = 4,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("DAL.Entities.Common.Message.AppMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("BBSMessages");
                });

            modelBuilder.Entity("DAL.Entities.Common.Message.AppMessageContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppMessageContent");
                });

            modelBuilder.Entity("DAL.Entities.Common.Message.AppUserRelate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Relation")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("AppUserRelates");
                });

            modelBuilder.Entity("DAL.Entities.Common.ShortUrl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expire")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("Key");

                    b.ToTable("CommonShortUrl");
                });

            modelBuilder.Entity("DAL.Entities.Common.ShortUrlStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UrlId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ViewById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UrlId");

                    b.HasIndex("ViewById");

                    b.ToTable("CommonShortUrlStatistics");
                });

            modelBuilder.Entity("DAL.Entities.Company", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.HasIndex("LocationCode");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("DAL.Entities.CompanyManagers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthById");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyManagers");
                });

            modelBuilder.Entity("DAL.Entities.Duties", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMajorManager")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Duties");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.FileUploadStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Current")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("FileInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Total")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UploadCacheId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FileInfoId");

                    b.HasIndex("UploadCacheId");

                    b.ToTable("FileUploadStatuses");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.UploadCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UploadCaches");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.UserFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserFiles");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.UserFileInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FromClient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("ParentId");

                    b.ToTable("UserFileInfos");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.GainGiftCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("GainStamp")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("UserId");

                    b.ToTable("GainGiftCodeHistory");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.GiftCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InvalidTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShareBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShareTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("GiftCodes");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("GameId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("HandleInterval")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LastHandleStamp")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LastSignInId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LastSignInId");

                    b.ToTable("GameR3Users");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GameR3UserInfos");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PermissionItem");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionRoleRalatePermitssion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSelf")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleName");

                    b.ToTable("PermissionRoleRalatePermissions");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionsRole", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreteById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.HasIndex("CreteById");

                    b.ToTable("PermissionsRoles");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionsRoleRelate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FromName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ToName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromName");

                    b.HasIndex("ToName");

                    b.ToTable("PermissionsRoleRelates");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionsUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionsUsers");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionsUserRelate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleName");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionsUserRelates");
                });

            modelBuilder.Entity("DAL.Entities.RecallOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("HandleById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HandleById");

                    b.ToTable("RecallOrders");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Avatar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Img")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserDiyAvatars");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.DiyInfo.ThirdpardAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NickName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdpardPlatformName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserDiyInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserDiyInfoId");

                    b.ToTable("ThirdpardAccounts");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Resume.UserResumeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUserResumeInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Resume.UserSocialResume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SocialResumeType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("UserSocialResumes");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Resume.UserTitleResume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModelCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserResumeInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModelCode");

                    b.HasIndex("UserResumeInfoId");

                    b.ToTable("AppUserTitleResumes");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.AppUsersSettleModifyRecord", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNewYearInitData")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<Guid?>("SettleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Code");

                    b.HasIndex("SettleId");

                    b.ToTable("AppUsersSettleModifyRecord");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.Moment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AddressCode")
                        .HasColumnType("int");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddressCode");

                    b.ToTable("AppUserSocialInfoSettleMoments");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.Settle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LoverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LoversParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PrevYearlyComsumeLength")
                        .HasColumnType("int");

                    b.Property<Guid?>("SelfId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LoverId");

                    b.HasIndex("LoversParentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SelfId");

                    b.ToTable("AppUserSocialInfoSettles");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BaseInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DiyInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResumeInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SocialInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StatusBeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StatusEndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("BaseInfoId");

                    b.HasIndex("CompanyInfoId");

                    b.HasIndex("DiyInfoId");

                    b.HasIndex("ResumeInfoId");

                    b.HasIndex("SocialInfoId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("UA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.ToTable("UserActions");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserAppMessage.UserAppMessageInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FansCount")
                        .HasColumnType("int");

                    b.Property<int>("FollowCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Setting")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UnreadMessage")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAppMessageInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserApplicationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplicationSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvitedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserRemoveReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationSettingId");

                    b.ToTable("AppUserApplicationInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserApplicationSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastSubmitApplyTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUserApplicationSettings");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserBaseInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Hometown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("PasswordModify")
                        .HasColumnType("bit")
                        .HasColumnName("PasswodModify");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time_BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Time_Party")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Time_Work")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppUserBaseInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserCompanyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("DutiesCode")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TitleCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TitleDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("DutiesCode");

                    b.HasIndex("TitleCode");

                    b.ToTable("AppUserCompanyInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserCompanyTitle", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DisableVacation")
                        .HasColumnType("bit");

                    b.Property<bool>("EnableVacationDay")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VacationDay")
                        .HasColumnType("int");

                    b.HasKey("Code");

                    b.ToTable("UserCompanyTitles");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserDiyInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("AppUserDiyInfos");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserSocialInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AddressCode")
                        .HasColumnType("int");

                    b.Property<string>("AddressDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SettleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressCode");

                    b.HasIndex("SettleId");

                    b.ToTable("AppUserSocialInfos");
                });

            modelBuilder.Entity("DAL.Entities.VacationDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VacationDescriptions");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.Statistics.StatisticsDailyProcessRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplyMembersCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompleteVacationExpectDayCount")
                        .HasColumnType("int");

                    b.Property<int>("CompleteVacationRealDayCount")
                        .HasColumnType("int");

                    b.Property<int>("CompleteYearlyVacationCount")
                        .HasColumnType("int");

                    b.Property<int>("MembersCount")
                        .HasColumnType("int");

                    b.Property<int>("MembersVacationDayLessThanP60")
                        .HasColumnType("int");

                    b.Property<DateTime>("Target")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Target", "CompanyCode");

                    b.ToTable("StatisticsDailyProcessRates");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.Statistics.StatisticsNewApply.StatisticsApplyComplete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<byte>("From")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Target")
                        .HasColumnType("datetime2");

                    b.Property<byte>("To")
                        .HasColumnType("tinyint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Target", "CompanyCode");

                    b.ToTable("StatisticsCompleteApplies");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.Statistics.StatisticsNewApply.StatisticsApplyNew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<byte>("From")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Target")
                        .HasColumnType("datetime2");

                    b.Property<byte>("To")
                        .HasColumnType("tinyint");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Target", "CompanyCode");

                    b.ToTable("StatisticsNewApplies");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.StatisticsAppliesProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplyCount")
                        .HasColumnType("int");

                    b.Property<int>("ApplySumDayCount")
                        .HasColumnType("int");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Target")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Target", "CompanyCode");

                    b.ToTable("StatisticsAppliesProcesses");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.VacationAdditional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApplyRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplyRequestId");

                    b.ToTable("VacationAdditionals");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.VacationIndayType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedTrace")
                        .HasColumnType("bit");

                    b.Property<int>("PermitCrossDay")
                        .HasColumnType("int");

                    b.Property<string>("RegionOnCompany")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacationIndayTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alias = "外出",
                            Background = "inday_outdoor.jpg",
                            Description = "办事、购物、休闲、一日内看病等利用非工作日的因私外出活动",
                            Disabled = false,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "外出",
                            NeedTrace = false,
                            PermitCrossDay = 0,
                            RegionOnCompany = ""
                        },
                        new
                        {
                            Id = 2,
                            Alias = "出差",
                            Background = "inday_business.jpg",
                            Description = "公差、接车/机、开会、保障等非集体活动外出",
                            Disabled = false,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "出差",
                            NeedTrace = false,
                            PermitCrossDay = 7,
                            RegionOnCompany = ""
                        },
                        new
                        {
                            Id = 3,
                            Alias = "回家",
                            Background = "inday_family.jpg",
                            Description = "工作日下班后、节假日全天等跨日外出",
                            Disabled = false,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "回家",
                            NeedTrace = false,
                            PermitCrossDay = 3,
                            RegionOnCompany = ""
                        });
                });

            modelBuilder.Entity("DAL.Entities.Vacations.VacationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowBeforePrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CaculateBenefit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanUseOnTrip")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxLength")
                        .HasColumnType("int");

                    b.Property<int>("MinLength")
                        .HasColumnType("int");

                    b.Property<bool>("MinusNextYear")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NotPermitCrossYear")
                        .HasColumnType("bit");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<string>("RegionOnCompany")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VacationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alias = "正休",
                            AllowBeforePrimary = false,
                            Background = "vacation_zhengxiu.jpg",
                            CaculateBenefit = true,
                            CanUseOnTrip = true,
                            Description = "正常休假",
                            Disabled = false,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxLength = 500,
                            MinLength = 0,
                            MinusNextYear = false,
                            Name = "正休",
                            NotPermitCrossYear = false,
                            Primary = true,
                            RegionOnCompany = ""
                        },
                        new
                        {
                            Id = 2,
                            Alias = "事假",
                            AllowBeforePrimary = false,
                            Background = "vacation_shijia.jpg",
                            CaculateBenefit = false,
                            CanUseOnTrip = false,
                            Description = "仅可在正休的假期结束后提交，不超过10天。",
                            Disabled = false,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxLength = 30,
                            MinLength = 0,
                            MinusNextYear = true,
                            Name = "事假",
                            NotPermitCrossYear = false,
                            Primary = false,
                            RegionOnCompany = ""
                        },
                        new
                        {
                            Id = 3,
                            Alias = "病休",
                            AllowBeforePrimary = true,
                            Background = "vacation_bingxiu.jpg",
                            CaculateBenefit = false,
                            CanUseOnTrip = false,
                            Description = "须提供医院开具的有效证明。",
                            Disabled = false,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxLength = 30,
                            MinLength = 0,
                            MinusNextYear = true,
                            Name = "病休",
                            NotPermitCrossYear = false,
                            Primary = false,
                            RegionOnCompany = ""
                        },
                        new
                        {
                            Id = 4,
                            Alias = "疫情专项",
                            AllowBeforePrimary = true,
                            Background = "vacation_yiqingzhuanxiang.jpg",
                            CaculateBenefit = false,
                            CanUseOnTrip = false,
                            Description = "仅限疫情期间14天隔离期使用，将不计算正休假。\n其余情况请使用`确认时间`推迟归队，将从全年假期中扣除期间延迟归队的假期天数。",
                            Disabled = false,
                            IsRemoved = false,
                            IsRemovedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MaxLength = 30,
                            MinLength = 0,
                            MinusNextYear = true,
                            Name = "疫情专项",
                            NotPermitCrossYear = false,
                            Primary = false,
                            RegionOnCompany = ""
                        });
                });

            modelBuilder.Entity("DAL.Entities.XlsTemplete", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.ToTable("XlsTempletes");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Grade.GradeExam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExecuteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("HandleById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HoldByCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("HandleById");

                    b.HasIndex("HoldByCode");

                    b.ToTable("GradeExams");
                });

            modelBuilder.Entity("DAL.Entities.ZX.MemberRate.NormalRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("RatingCycleCount")
                        .HasColumnType("int");

                    b.Property<int>("RatingType")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyCode");

                    b.HasIndex("UserId");

                    b.ToTable("NormalRates");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Phy.GradePhyRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Create")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RawValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreateById");

                    b.HasIndex("ExamId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("GradePhyRecords");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Phy.GradePhyStandard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BaseStandard")
                        .HasColumnType("int");

                    b.Property<string>("ExpressionWhenFullGrade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradePairs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GradePhySubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<int>("maxAge")
                        .HasColumnType("int");

                    b.Property<int>("minAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradePhySubjectId");

                    b.ToTable("GradePhyStandards");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Phy.GradePhySubject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CountDown")
                        .HasColumnType("bit");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IsRemovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueFormat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GradePhySubjects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.Apply", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.ApplyAuditStreamSolutionRule", "ApplyAuditStreamSolutionRule")
                        .WithMany()
                        .HasForeignKey("ApplyAuditStreamSolutionRuleId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyBaseInfo", "BaseInfo")
                        .WithMany()
                        .HasForeignKey("BaseInfoId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyExecuteStatus", "ExecuteStatusDetail")
                        .WithMany()
                        .HasForeignKey("ExecuteStatusDetailId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyAuditStep", "NowAuditStep")
                        .WithMany()
                        .HasForeignKey("NowAuditStepId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyRequest", "RequestInfo")
                        .WithMany()
                        .HasForeignKey("RequestInfoId");

                    b.Navigation("ApplyAuditStreamSolutionRule");

                    b.Navigation("BaseInfo");

                    b.Navigation("ExecuteStatusDetail");

                    b.Navigation("NowAuditStep");

                    b.Navigation("RequestInfo");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStep", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.Apply", null)
                        .WithMany("ApplyAllAuditStep")
                        .HasForeignKey("ApplyId");

                    b.HasOne("DAL.Entities.ApplyInfo.DailyApply.ApplyInday", null)
                        .WithMany("ApplyAllAuditStep")
                        .HasForeignKey("ApplyIndayId");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyAuditStreamSolutionRule", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.ApplyAuditStream", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId");

                    b.Navigation("Solution");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyBaseInfo", b =>
                {
                    b.HasOne("DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.HasOne("DAL.Entities.Duties", "Duties")
                        .WithMany()
                        .HasForeignKey("DutiesCode");

                    b.HasOne("DAL.Entities.UserInfo.User", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("DAL.Entities.UserInfo.UserSocialInfo", "Social")
                        .WithMany()
                        .HasForeignKey("SocialId");

                    b.Navigation("Company");

                    b.Navigation("CreateBy");

                    b.Navigation("Duties");

                    b.Navigation("From");

                    b.Navigation("Social");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyComment", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("DAL.Entities.UserInfo.User", "ModifyBy")
                        .WithMany()
                        .HasForeignKey("ModifyById");

                    b.Navigation("From");

                    b.Navigation("ModifyBy");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyCommentLike", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.ApplyComment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId");

                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.Navigation("Comment");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyExecuteStatus", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "HandleBy")
                        .WithMany()
                        .HasForeignKey("HandleById");

                    b.Navigation("HandleBy");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyRequest", b =>
                {
                    b.HasOne("DAL.Entities.AdminDivision", "VacationPlace")
                        .WithMany()
                        .HasForeignKey("VacationPlaceCode");

                    b.Navigation("VacationPlace");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyResponse", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.Apply", null)
                        .WithMany("Response")
                        .HasForeignKey("ApplyId");

                    b.HasOne("DAL.Entities.ApplyInfo.DailyApply.ApplyInday", null)
                        .WithMany("Response")
                        .HasForeignKey("ApplyIndayId");

                    b.HasOne("DAL.Entities.UserInfo.User", "AuditingBy")
                        .WithMany()
                        .HasForeignKey("AuditingById");

                    b.Navigation("AuditingBy");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.DailyApply.ApplyInday", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.ApplyAuditStreamSolutionRule", "ApplyAuditStreamSolutionRule")
                        .WithMany()
                        .HasForeignKey("ApplyAuditStreamSolutionRuleId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyBaseInfo", "BaseInfo")
                        .WithMany()
                        .HasForeignKey("BaseInfoId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyExecuteStatus", "ExecuteStatusDetail")
                        .WithMany()
                        .HasForeignKey("ExecuteStatusDetailId");

                    b.HasOne("DAL.Entities.ApplyInfo.ApplyAuditStep", "NowAuditStep")
                        .WithMany()
                        .HasForeignKey("NowAuditStepId");

                    b.HasOne("DAL.Entities.ApplyInfo.DailyApply.ApplyIndayRequest", "RequestInfo")
                        .WithMany()
                        .HasForeignKey("RequestInfoId");

                    b.Navigation("ApplyAuditStreamSolutionRule");

                    b.Navigation("BaseInfo");

                    b.Navigation("ExecuteStatusDetail");

                    b.Navigation("NowAuditStep");

                    b.Navigation("RequestInfo");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.DailyApply.ApplyIndayRequest", b =>
                {
                    b.HasOne("DAL.Entities.AdminDivision", "VacationPlace")
                        .WithMany()
                        .HasForeignKey("VacationPlaceCode");

                    b.Navigation("VacationPlace");
                });

            modelBuilder.Entity("DAL.Entities.BBS.PostContent", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.HasOne("DAL.Entities.BBS.PostContent", "ReplySubject")
                        .WithMany()
                        .HasForeignKey("ReplySubjectId");

                    b.HasOne("DAL.Entities.UserInfo.User", "ReplyTo")
                        .WithMany()
                        .HasForeignKey("ReplyToId");

                    b.Navigation("CreateBy");

                    b.Navigation("ReplySubject");

                    b.Navigation("ReplyTo");
                });

            modelBuilder.Entity("DAL.Entities.BBS.PostInteractStatus", b =>
                {
                    b.HasOne("DAL.Entities.BBS.PostContent", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId");

                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.Navigation("Content");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("DAL.Entities.ClientDevice.Client", b =>
                {
                    b.HasOne("DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("DAL.Entities.UserInfo.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Company");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DAL.Entities.ClientDevice.Virus", b =>
                {
                    b.HasOne("DAL.Entities.ClientDevice.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("DAL.Entities.ClientDevice.VirusTrace", "TraceType")
                        .WithMany()
                        .HasForeignKey("TraceTypeId");

                    b.Navigation("Client");

                    b.Navigation("TraceType");
                });

            modelBuilder.Entity("DAL.Entities.ClientDevice.VirusHandleRecord", b =>
                {
                    b.HasOne("DAL.Entities.ClientDevice.Virus", "Virus")
                        .WithMany()
                        .HasForeignKey("VirusId");

                    b.Navigation("Virus");
                });

            modelBuilder.Entity("DAL.Entities.ClientDevice.VirusTypeDispatch", b =>
                {
                    b.HasOne("DAL.Entities.ClientDevice.Virus", "Virus")
                        .WithMany()
                        .HasForeignKey("VirusId");

                    b.HasOne("DAL.Entities.ClientDevice.VirusTrace", "VirusTrace")
                        .WithMany()
                        .HasForeignKey("VirusTraceId");

                    b.Navigation("Virus");

                    b.Navigation("VirusTrace");
                });

            modelBuilder.Entity("DAL.Entities.Common.Message.AppMessage", b =>
                {
                    b.HasOne("DAL.Entities.Common.Message.AppMessageContent", "Content")
                        .WithMany()
                        .HasForeignKey("ContentId");

                    b.HasOne("DAL.Entities.UserInfo.User", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("DAL.Entities.UserInfo.User", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("Content");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("DAL.Entities.Common.Message.AppUserRelate", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "From")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.HasOne("DAL.Entities.UserInfo.User", "To")
                        .WithMany()
                        .HasForeignKey("ToId");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("DAL.Entities.Common.ShortUrl", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("DAL.Entities.Common.ShortUrlStatistics", b =>
                {
                    b.HasOne("DAL.Entities.Common.ShortUrl", "Url")
                        .WithMany()
                        .HasForeignKey("UrlId");

                    b.HasOne("DAL.Entities.UserInfo.User", "ViewBy")
                        .WithMany()
                        .HasForeignKey("ViewById");

                    b.Navigation("Url");

                    b.Navigation("ViewBy");
                });

            modelBuilder.Entity("DAL.Entities.Company", b =>
                {
                    b.HasOne("DAL.Entities.AdminDivision", "Location")
                        .WithMany()
                        .HasForeignKey("LocationCode");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DAL.Entities.CompanyManagers", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "AuthBy")
                        .WithMany()
                        .HasForeignKey("AuthById");

                    b.HasOne("DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("AuthBy");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.FileUploadStatus", b =>
                {
                    b.HasOne("DAL.Entities.FileEngine.UserFileInfo", "FileInfo")
                        .WithMany()
                        .HasForeignKey("FileInfoId");

                    b.HasOne("DAL.Entities.FileEngine.UploadCache", null)
                        .WithMany("FileStatus")
                        .HasForeignKey("UploadCacheId");

                    b.Navigation("FileInfo");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.UserFileInfo", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.HasOne("DAL.Entities.FileEngine.UserFileInfo", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("CreateBy");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.GainGiftCode", b =>
                {
                    b.HasOne("DAL.Entities.Game_r3.GiftCode", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId");

                    b.HasOne("DAL.Entities.Game_r3.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Code");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.User", b =>
                {
                    b.HasOne("DAL.Entities.BBS.SignIn", "LastSignIn")
                        .WithMany()
                        .HasForeignKey("LastSignInId");

                    b.Navigation("LastSignIn");
                });

            modelBuilder.Entity("DAL.Entities.Game_r3.UserInfo", b =>
                {
                    b.HasOne("DAL.Entities.Game_r3.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionRoleRalatePermitssion", b =>
                {
                    b.HasOne("DAL.Entities.Permisstions.PermissionItem", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("DAL.Entities.Permisstions.PermissionsRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionsRole", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreteBy")
                        .WithMany()
                        .HasForeignKey("CreteById");

                    b.Navigation("CreteBy");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionsRoleRelate", b =>
                {
                    b.HasOne("DAL.Entities.Permisstions.PermissionsRole", "From")
                        .WithMany()
                        .HasForeignKey("FromName");

                    b.HasOne("DAL.Entities.Permisstions.PermissionsRole", "To")
                        .WithMany()
                        .HasForeignKey("ToName");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionsUser", b =>
                {
                    b.HasOne("DAL.Entities.Permisstions.PermissionItem", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId");

                    b.HasOne("DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Permisstions.PermissionsUserRelate", b =>
                {
                    b.HasOne("DAL.Entities.Permisstions.PermissionsRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName");

                    b.HasOne("DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.RecallOrder", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "HandleBy")
                        .WithMany()
                        .HasForeignKey("HandleById");

                    b.Navigation("HandleBy");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Avatar", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.DiyInfo.ThirdpardAccount", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.UserDiyInfo", null)
                        .WithMany("ThirdpardAccount")
                        .HasForeignKey("UserDiyInfoId");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Resume.UserSocialResume", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.Settle.Moment", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Resume.UserTitleResume", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.UserCompanyTitle", "Model")
                        .WithMany()
                        .HasForeignKey("ModelCode");

                    b.HasOne("DAL.Entities.UserInfo.Resume.UserResumeInfo", null)
                        .WithMany("TitleResumes")
                        .HasForeignKey("UserResumeInfoId");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.AppUsersSettleModifyRecord", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.Settle.Settle", null)
                        .WithMany("PrevYealyLengthHistory")
                        .HasForeignKey("SettleId");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.Moment", b =>
                {
                    b.HasOne("DAL.Entities.AdminDivision", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCode");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.Settle", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.Settle.Moment", "Lover")
                        .WithMany()
                        .HasForeignKey("LoverId");

                    b.HasOne("DAL.Entities.UserInfo.Settle.Moment", "LoversParent")
                        .WithMany()
                        .HasForeignKey("LoversParentId");

                    b.HasOne("DAL.Entities.UserInfo.Settle.Moment", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("DAL.Entities.UserInfo.Settle.Moment", "Self")
                        .WithMany()
                        .HasForeignKey("SelfId");

                    b.Navigation("Lover");

                    b.Navigation("LoversParent");

                    b.Navigation("Parent");

                    b.Navigation("Self");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.User", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.UserApplicationInfo", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("DAL.Entities.UserInfo.UserBaseInfo", "BaseInfo")
                        .WithMany()
                        .HasForeignKey("BaseInfoId");

                    b.HasOne("DAL.Entities.UserInfo.UserCompanyInfo", "CompanyInfo")
                        .WithMany()
                        .HasForeignKey("CompanyInfoId");

                    b.HasOne("DAL.Entities.UserInfo.UserDiyInfo", "DiyInfo")
                        .WithMany()
                        .HasForeignKey("DiyInfoId");

                    b.HasOne("DAL.Entities.UserInfo.Resume.UserResumeInfo", "ResumeInfo")
                        .WithMany()
                        .HasForeignKey("ResumeInfoId");

                    b.HasOne("DAL.Entities.UserInfo.UserSocialInfo", "SocialInfo")
                        .WithMany()
                        .HasForeignKey("SocialInfoId");

                    b.Navigation("Application");

                    b.Navigation("BaseInfo");

                    b.Navigation("CompanyInfo");

                    b.Navigation("DiyInfo");

                    b.Navigation("ResumeInfo");

                    b.Navigation("SocialInfo");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserAppMessage.UserAppMessageInfo", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserApplicationInfo", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.UserApplicationSetting", "ApplicationSetting")
                        .WithMany()
                        .HasForeignKey("ApplicationSettingId");

                    b.Navigation("ApplicationSetting");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserCompanyInfo", b =>
                {
                    b.HasOne("DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("DAL.Entities.Duties", "Duties")
                        .WithMany()
                        .HasForeignKey("DutiesCode");

                    b.HasOne("DAL.Entities.UserInfo.UserCompanyTitle", "Title")
                        .WithMany()
                        .HasForeignKey("TitleCode");

                    b.Navigation("Company");

                    b.Navigation("Duties");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserDiyInfo", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserSocialInfo", b =>
                {
                    b.HasOne("DAL.Entities.AdminDivision", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCode");

                    b.HasOne("DAL.Entities.UserInfo.Settle.Settle", "Settle")
                        .WithMany()
                        .HasForeignKey("SettleId");

                    b.Navigation("Address");

                    b.Navigation("Settle");
                });

            modelBuilder.Entity("DAL.Entities.Vacations.VacationAdditional", b =>
                {
                    b.HasOne("DAL.Entities.ApplyInfo.ApplyRequest", null)
                        .WithMany("AdditialVacations")
                        .HasForeignKey("ApplyRequestId");
                });

            modelBuilder.Entity("DAL.Entities.XlsTemplete", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.Navigation("CreateBy");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Grade.GradeExam", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.HasOne("DAL.Entities.UserInfo.User", "HandleBy")
                        .WithMany()
                        .HasForeignKey("HandleById");

                    b.HasOne("DAL.Entities.Company", "HoldBy")
                        .WithMany()
                        .HasForeignKey("HoldByCode");

                    b.Navigation("CreateBy");

                    b.Navigation("HandleBy");

                    b.Navigation("HoldBy");
                });

            modelBuilder.Entity("DAL.Entities.ZX.MemberRate.NormalRate", b =>
                {
                    b.HasOne("DAL.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyCode");

                    b.HasOne("DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Phy.GradePhyRecord", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.User", "CreateBy")
                        .WithMany()
                        .HasForeignKey("CreateById");

                    b.HasOne("DAL.Entities.ZX.Grade.GradeExam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId");

                    b.HasOne("DAL.Entities.ZX.Phy.GradePhySubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("DAL.Entities.UserInfo.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("CreateBy");

                    b.Navigation("Exam");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Phy.GradePhyStandard", b =>
                {
                    b.HasOne("DAL.Entities.ZX.Phy.GradePhySubject", null)
                        .WithMany("Standards")
                        .HasForeignKey("GradePhySubjectId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.UserInfo.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.UserInfo.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.Apply", b =>
                {
                    b.Navigation("ApplyAllAuditStep");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.ApplyRequest", b =>
                {
                    b.Navigation("AdditialVacations");
                });

            modelBuilder.Entity("DAL.Entities.ApplyInfo.DailyApply.ApplyInday", b =>
                {
                    b.Navigation("ApplyAllAuditStep");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("DAL.Entities.FileEngine.UploadCache", b =>
                {
                    b.Navigation("FileStatus");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Resume.UserResumeInfo", b =>
                {
                    b.Navigation("TitleResumes");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.Settle.Settle", b =>
                {
                    b.Navigation("PrevYealyLengthHistory");
                });

            modelBuilder.Entity("DAL.Entities.UserInfo.UserDiyInfo", b =>
                {
                    b.Navigation("ThirdpardAccount");
                });

            modelBuilder.Entity("DAL.Entities.ZX.Phy.GradePhySubject", b =>
                {
                    b.Navigation("Standards");
                });
#pragma warning restore 612, 618
        }
    }
}
